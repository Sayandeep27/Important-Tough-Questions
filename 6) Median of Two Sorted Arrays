class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
          if(nums1.size()>nums2.size())
          {
              swap(nums1,nums2);
          }  // try to keep nums2 as bigger array


         int n1=nums1.size();
         int n2=nums2.size();

         int start=0,end=n1;

         int total=(n1+n2+1)/2;

         int n=n1+n2;

         while(start<=end)
         {
             int mid1=start+(end-start)/2;
             int mid2=total-mid1;

             int l1=INT_MIN,l2=INT_MIN;
             int r1=INT_MAX,r2=INT_MAX;

             if(mid1<n1) r1=nums1[mid1];
             if(mid2<n2) r2=nums2[mid2];

             if(mid1-1>=0) l1=nums1[mid1-1];
             if(mid2-1>=0) l2=nums2[mid2-1];


             if(l1<=r2 and l2<=r1)
             {
                 if(n%2==1) return max(l1,l2);
                 else
                 {
                     return (double)(max(l1,l2)+min(r1,r2))/2.0;
                 }
             }
             else if(l1>r2) end=mid1-1;
             else start=mid1+1;

         }


        return 0;
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        
        int n=nums1.size();
        int m=nums2.size();
        
        vector<double>ans;
        
        int i=0,j=0;
        
        while(i<n and j<m)
        {
          if(nums1[i]<nums2[j])
          {
              ans.push_back(nums1[i]);
              i++;
              
          }
            else if(nums1[i]>nums2[j])
            {
                ans.push_back(nums2[j]);
                j++;
            }
            else
            {
                ans.push_back(nums1[i]);
                ans.push_back(nums2[j]);
                i++;
                j++;

            }
        
        }
        
        while(i<n)
        {
            ans.push_back(nums1[i]);
            i++;
        }
        
        while(j<m)
        {
            ans.push_back(nums2[j]);
            j++;
        }
        
        
        if(ans.size()%2==0)
        {
            double x=ans[ans.size()/2];
            double y=ans[(ans.size()/2)-1];
            
            return (x+y)/2;

        }
        else
        {
            return ans[ans.size()/2];
        }
        
        
        
    }
};
