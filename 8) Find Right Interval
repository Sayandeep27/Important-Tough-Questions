class Solution {
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        
        vector<int>ans;
        int n=intervals.size();
        
        vector<int>temp;
        
        for(int i=0;i<n;i++)
        {
            temp.push_back(intervals[i][0]);
        }
        
        
        sort(temp.begin(),temp.end());
        
        unordered_map<int,int>mp;
        
        for(int i=0;i<n;i++)
        {
            mp[intervals[i][0]]=i;
        }
        
        for(int i=0;i<n;i++)
        {
            int key=intervals[i][1];
            
            int index=lower_bound(temp.begin(),temp.end(),key)-temp.begin();
            
            if(index>=0 and index<n and temp[index]>=key)
            {
                ans.push_back(mp[temp[index]]);
            }
            else
            {
                ans.push_back(-1);
            }
        }
        
        return ans;
       
    }
};
